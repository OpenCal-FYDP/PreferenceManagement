// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: service.proto

import {
  BinaryReader,
  BinaryWriter,
  JSONrequest,
  PBrequest,
} from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `yarn twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_44 } from "twirpscript";

//=============================================//
// PreferenceManagementService Protobuf Client //
//=============================================//

export async function GetUserProfile(getUserProfileReq, config) {
  const response = await PBrequest(
    "/PreferenceManagementService/GetUserProfile",
    GetUserProfileReq.encode(getUserProfileReq),
    config
  );
  return GetUserProfileRes.decode(response);
}

export async function GetAvailability(getAvailabilityReq, config) {
  const response = await PBrequest(
    "/PreferenceManagementService/GetAvailability",
    GetAvailabilityReq.encode(getAvailabilityReq),
    config
  );
  return GetAvailabilityRes.decode(response);
}

export async function GetBooking(getBookingReq, config) {
  const response = await PBrequest(
    "/PreferenceManagementService/GetBooking",
    GetBookingReq.encode(getBookingReq),
    config
  );
  return GetBookingRes.decode(response);
}

export async function SetUserProfile(setUserProfileReq, config) {
  const response = await PBrequest(
    "/PreferenceManagementService/SetUserProfile",
    SetUserProfileReq.encode(setUserProfileReq),
    config
  );
  return SetUserProfileRes.decode(response);
}

export async function SetAvailability(setAvailabilityReq, config) {
  const response = await PBrequest(
    "/PreferenceManagementService/SetAvailability",
    SetAvailabilityReq.encode(setAvailabilityReq),
    config
  );
  return SetAvailabilityRes.decode(response);
}

export async function SetBooking(setBookingReq, config) {
  const response = await PBrequest(
    "/PreferenceManagementService/SetBooking",
    SetBookingReq.encode(setBookingReq),
    config
  );
  return SetBookingRes.decode(response);
}

//=========================================//
// PreferenceManagementService JSON Client //
//=========================================//

export async function GetUserProfileJSON(getUserProfileReq, config) {
  const response = await JSONrequest(
    "/PreferenceManagementService/GetUserProfile",
    getUserProfileReq,
    config
  );
  return response;
}

export async function GetAvailabilityJSON(getAvailabilityReq, config) {
  const response = await JSONrequest(
    "/PreferenceManagementService/GetAvailability",
    getAvailabilityReq,
    config
  );
  return response;
}

export async function GetBookingJSON(getBookingReq, config) {
  const response = await JSONrequest(
    "/PreferenceManagementService/GetBooking",
    getBookingReq,
    config
  );
  return response;
}

export async function SetUserProfileJSON(setUserProfileReq, config) {
  const response = await JSONrequest(
    "/PreferenceManagementService/SetUserProfile",
    setUserProfileReq,
    config
  );
  return response;
}

export async function SetAvailabilityJSON(setAvailabilityReq, config) {
  const response = await JSONrequest(
    "/PreferenceManagementService/SetAvailability",
    setAvailabilityReq,
    config
  );
  return response;
}

export async function SetBookingJSON(setBookingReq, config) {
  const response = await JSONrequest(
    "/PreferenceManagementService/SetBooking",
    setBookingReq,
    config
  );
  return response;
}

export function createPreferenceManagementServiceHandler(service) {
  return {
    name: "PreferenceManagementService",
    methods: {
      GetUserProfile: {
        name: "GetUserProfile",
        handler: service.GetUserProfile,
        input: GetUserProfileReq,
        output: GetUserProfileRes,
      },
      GetAvailability: {
        name: "GetAvailability",
        handler: service.GetAvailability,
        input: GetAvailabilityReq,
        output: GetAvailabilityRes,
      },
      GetBooking: {
        name: "GetBooking",
        handler: service.GetBooking,
        input: GetBookingReq,
        output: GetBookingRes,
      },
      SetUserProfile: {
        name: "SetUserProfile",
        handler: service.SetUserProfile,
        input: SetUserProfileReq,
        output: SetUserProfileRes,
      },
      SetAvailability: {
        name: "SetAvailability",
        handler: service.SetAvailability,
        input: SetAvailabilityReq,
        output: SetAvailabilityRes,
      },
      SetBooking: {
        name: "SetBooking",
        handler: service.SetBooking,
        input: SetBookingReq,
        output: SetBookingRes,
      },
    },
  };
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const GetUserProfileReq = {
  /**
   * Serializes a GetUserProfileReq to protobuf.
   */
  encode: function (getUserProfileReq) {
    return GetUserProfileReq._writeMessage(
      getUserProfileReq,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetUserProfileReq from protobuf.
   */
  decode: function (bytes) {
    return GetUserProfileReq._readMessage(
      GetUserProfileReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetUserProfileReq to JSON.
   */
  encodeJSON: function (getUserProfileReq) {
    return JSON.stringify(
      GetUserProfileReq._writeMessageJSON(getUserProfileReq)
    );
  },

  /**
   * Deserializes a GetUserProfileReq from JSON.
   */
  decodeJSON: function (json) {
    return GetUserProfileReq._readMessageJSON(
      GetUserProfileReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetUserProfileReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      userID: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userID) {
      writer.writeString(1, msg.userID);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.userID) {
      json.userID = msg.userID;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userID = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const userID = json.userID ?? json.userID;
    if (userID) {
      msg.userID = userID;
    }
    return msg;
  },
};

export const Settings = {
  /**
   * Serializes a Settings to protobuf.
   */
  encode: function (settings) {
    return Settings._writeMessage(
      settings,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a Settings from protobuf.
   */
  decode: function (bytes) {
    return Settings._readMessage(
      Settings.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a Settings to JSON.
   */
  encodeJSON: function (settings) {
    return JSON.stringify(Settings._writeMessageJSON(settings));
  },

  /**
   * Deserializes a Settings from JSON.
   */
  decodeJSON: function (json) {
    return Settings._readMessageJSON(Settings.initialize(), JSON.parse(json));
  },

  /**
   * Initializes a Settings with all fields set to their default value.
   */
  initialize: function () {
    return {
      timeZone: "",
      fullName: "",
      timeFormat: "",
      shouldDefragMeetings: false,
      AvoidMorningMeetings: false,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.timeZone) {
      writer.writeString(1, msg.timeZone);
    }
    if (msg.fullName) {
      writer.writeString(2, msg.fullName);
    }
    if (msg.timeFormat) {
      writer.writeString(3, msg.timeFormat);
    }
    if (msg.shouldDefragMeetings) {
      writer.writeBool(4, msg.shouldDefragMeetings);
    }
    if (msg.AvoidMorningMeetings) {
      writer.writeBool(5, msg.AvoidMorningMeetings);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.timeZone) {
      json.timeZone = msg.timeZone;
    }
    if (msg.fullName) {
      json.fullName = msg.fullName;
    }
    if (msg.timeFormat) {
      json.timeFormat = msg.timeFormat;
    }
    if (msg.shouldDefragMeetings) {
      json.shouldDefragMeetings = msg.shouldDefragMeetings;
    }
    if (msg.AvoidMorningMeetings) {
      json.AvoidMorningMeetings = msg.AvoidMorningMeetings;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.timeZone = reader.readString();
          break;
        }
        case 2: {
          msg.fullName = reader.readString();
          break;
        }
        case 3: {
          msg.timeFormat = reader.readString();
          break;
        }
        case 4: {
          msg.shouldDefragMeetings = reader.readBool();
          break;
        }
        case 5: {
          msg.AvoidMorningMeetings = reader.readBool();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const timeZone = json.timeZone ?? json.timeZone;
    if (timeZone) {
      msg.timeZone = timeZone;
    }
    const fullName = json.fullName ?? json.fullName;
    if (fullName) {
      msg.fullName = fullName;
    }
    const timeFormat = json.timeFormat ?? json.timeFormat;
    if (timeFormat) {
      msg.timeFormat = timeFormat;
    }
    const shouldDefragMeetings =
      json.shouldDefragMeetings ?? json.shouldDefragMeetings;
    if (shouldDefragMeetings) {
      msg.shouldDefragMeetings = shouldDefragMeetings;
    }
    const AvoidMorningMeetings =
      json.AvoidMorningMeetings ?? json.AvoidMorningMeetings;
    if (AvoidMorningMeetings) {
      msg.AvoidMorningMeetings = AvoidMorningMeetings;
    }
    return msg;
  },
};

export const GetUserProfileRes = {
  /**
   * Serializes a GetUserProfileRes to protobuf.
   */
  encode: function (getUserProfileRes) {
    return GetUserProfileRes._writeMessage(
      getUserProfileRes,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetUserProfileRes from protobuf.
   */
  decode: function (bytes) {
    return GetUserProfileRes._readMessage(
      GetUserProfileRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetUserProfileRes to JSON.
   */
  encodeJSON: function (getUserProfileRes) {
    return JSON.stringify(
      GetUserProfileRes._writeMessageJSON(getUserProfileRes)
    );
  },

  /**
   * Deserializes a GetUserProfileRes from JSON.
   */
  decodeJSON: function (json) {
    return GetUserProfileRes._readMessageJSON(
      GetUserProfileRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetUserProfileRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      email: "",
      username: "",
      timeAvailability: [],
      bookingLinks: [],
      settings: Settings.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.timeAvailability?.length) {
      writer.writeRepeatedString(3, msg.timeAvailability);
    }
    if (msg.bookingLinks?.length) {
      writer.writeRepeatedString(4, msg.bookingLinks);
    }
    if (msg.settings) {
      writer.writeMessage(5, msg.settings, Settings._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.timeAvailability?.length) {
      json.timeAvailability = msg.timeAvailability;
    }
    if (msg.bookingLinks?.length) {
      json.bookingLinks = msg.bookingLinks;
    }
    if (msg.settings) {
      const settings = Settings._writeMessageJSON(msg.settings);
      if (Object.keys(settings).length > 0) {
        json.settings = settings;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.timeAvailability.push(reader.readString());
          break;
        }
        case 4: {
          msg.bookingLinks.push(reader.readString());
          break;
        }
        case 5: {
          reader.readMessage(msg.settings, Settings._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const email = json.email ?? json.email;
    if (email) {
      msg.email = email;
    }
    const username = json.username ?? json.username;
    if (username) {
      msg.username = username;
    }
    const timeAvailability = json.timeAvailability ?? json.timeAvailability;
    if (timeAvailability) {
      msg.timeAvailability = timeAvailability;
    }
    const bookingLinks = json.bookingLinks ?? json.bookingLinks;
    if (bookingLinks) {
      msg.bookingLinks = bookingLinks;
    }
    const settings = json.settings ?? json.settings;
    if (settings) {
      const m = Settings.initialize();
      Settings._readMessageJSON(m, settings);
      msg.settings = m;
    }
    return msg;
  },
};

export const GetAvailabilityReq = {
  /**
   * Serializes a GetAvailabilityReq to protobuf.
   */
  encode: function (getAvailabilityReq) {
    return GetAvailabilityReq._writeMessage(
      getAvailabilityReq,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetAvailabilityReq from protobuf.
   */
  decode: function (bytes) {
    return GetAvailabilityReq._readMessage(
      GetAvailabilityReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetAvailabilityReq to JSON.
   */
  encodeJSON: function (getAvailabilityReq) {
    return JSON.stringify(
      GetAvailabilityReq._writeMessageJSON(getAvailabilityReq)
    );
  },

  /**
   * Deserializes a GetAvailabilityReq from JSON.
   */
  decodeJSON: function (json) {
    return GetAvailabilityReq._readMessageJSON(
      GetAvailabilityReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetAvailabilityReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      userID: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userID) {
      writer.writeString(1, msg.userID);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.userID) {
      json.userID = msg.userID;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userID = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const userID = json.userID ?? json.userID;
    if (userID) {
      msg.userID = userID;
    }
    return msg;
  },
};

export const GetAvailabilityRes = {
  /**
   * Serializes a GetAvailabilityRes to protobuf.
   */
  encode: function (getAvailabilityRes) {
    return GetAvailabilityRes._writeMessage(
      getAvailabilityRes,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetAvailabilityRes from protobuf.
   */
  decode: function (bytes) {
    return GetAvailabilityRes._readMessage(
      GetAvailabilityRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetAvailabilityRes to JSON.
   */
  encodeJSON: function (getAvailabilityRes) {
    return JSON.stringify(
      GetAvailabilityRes._writeMessageJSON(getAvailabilityRes)
    );
  },

  /**
   * Deserializes a GetAvailabilityRes from JSON.
   */
  decodeJSON: function (json) {
    return GetAvailabilityRes._readMessageJSON(
      GetAvailabilityRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetAvailabilityRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      email: "",
      username: "",
      timeAvailability: [],
      bookingLinks: [],
      settings: Settings.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.email) {
      writer.writeString(1, msg.email);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.timeAvailability?.length) {
      writer.writeRepeatedString(3, msg.timeAvailability);
    }
    if (msg.bookingLinks?.length) {
      writer.writeRepeatedString(4, msg.bookingLinks);
    }
    if (msg.settings) {
      writer.writeMessage(5, msg.settings, Settings._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.timeAvailability?.length) {
      json.timeAvailability = msg.timeAvailability;
    }
    if (msg.bookingLinks?.length) {
      json.bookingLinks = msg.bookingLinks;
    }
    if (msg.settings) {
      const settings = Settings._writeMessageJSON(msg.settings);
      if (Object.keys(settings).length > 0) {
        json.settings = settings;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.email = reader.readString();
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.timeAvailability.push(reader.readString());
          break;
        }
        case 4: {
          msg.bookingLinks.push(reader.readString());
          break;
        }
        case 5: {
          reader.readMessage(msg.settings, Settings._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const email = json.email ?? json.email;
    if (email) {
      msg.email = email;
    }
    const username = json.username ?? json.username;
    if (username) {
      msg.username = username;
    }
    const timeAvailability = json.timeAvailability ?? json.timeAvailability;
    if (timeAvailability) {
      msg.timeAvailability = timeAvailability;
    }
    const bookingLinks = json.bookingLinks ?? json.bookingLinks;
    if (bookingLinks) {
      msg.bookingLinks = bookingLinks;
    }
    const settings = json.settings ?? json.settings;
    if (settings) {
      const m = Settings.initialize();
      Settings._readMessageJSON(m, settings);
      msg.settings = m;
    }
    return msg;
  },
};

export const GetBookingReq = {
  /**
   * Serializes a GetBookingReq to protobuf.
   */
  encode: function (getBookingReq) {
    return GetBookingReq._writeMessage(
      getBookingReq,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetBookingReq from protobuf.
   */
  decode: function (bytes) {
    return GetBookingReq._readMessage(
      GetBookingReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetBookingReq to JSON.
   */
  encodeJSON: function (getBookingReq) {
    return JSON.stringify(GetBookingReq._writeMessageJSON(getBookingReq));
  },

  /**
   * Deserializes a GetBookingReq from JSON.
   */
  decodeJSON: function (json) {
    return GetBookingReq._readMessageJSON(
      GetBookingReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetBookingReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      userID: "",
      bookingLinkID: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userID) {
      writer.writeString(1, msg.userID);
    }
    if (msg.bookingLinkID) {
      writer.writeString(2, msg.bookingLinkID);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.userID) {
      json.userID = msg.userID;
    }
    if (msg.bookingLinkID) {
      json.bookingLinkID = msg.bookingLinkID;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userID = reader.readString();
          break;
        }
        case 2: {
          msg.bookingLinkID = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const userID = json.userID ?? json.userID;
    if (userID) {
      msg.userID = userID;
    }
    const bookingLinkID = json.bookingLinkID ?? json.bookingLinkID;
    if (bookingLinkID) {
      msg.bookingLinkID = bookingLinkID;
    }
    return msg;
  },
};

export const GetBookingRes = {
  /**
   * Serializes a GetBookingRes to protobuf.
   */
  encode: function (getBookingRes) {
    return GetBookingRes._writeMessage(
      getBookingRes,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a GetBookingRes from protobuf.
   */
  decode: function (bytes) {
    return GetBookingRes._readMessage(
      GetBookingRes.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a GetBookingRes to JSON.
   */
  encodeJSON: function (getBookingRes) {
    return JSON.stringify(GetBookingRes._writeMessageJSON(getBookingRes));
  },

  /**
   * Deserializes a GetBookingRes from JSON.
   */
  decodeJSON: function (json) {
    return GetBookingRes._readMessageJSON(
      GetBookingRes.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a GetBookingRes with all fields set to their default value.
   */
  initialize: function () {
    return {
      isActive: false,
      isMultiUse: false,
      attendees: [],
      conferencing: "",
      timeIncrements: [],
      recurrence: "",
      availabilityToUse: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.isActive) {
      writer.writeBool(1, msg.isActive);
    }
    if (msg.isMultiUse) {
      writer.writeBool(2, msg.isMultiUse);
    }
    if (msg.attendees?.length) {
      writer.writeRepeatedString(3, msg.attendees);
    }
    if (msg.conferencing) {
      writer.writeString(4, msg.conferencing);
    }
    if (msg.timeIncrements?.length) {
      writer.writeRepeatedString(5, msg.timeIncrements);
    }
    if (msg.recurrence) {
      writer.writeString(6, msg.recurrence);
    }
    if (msg.availabilityToUse) {
      writer.writeString(7, msg.availabilityToUse);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.isActive) {
      json.isActive = msg.isActive;
    }
    if (msg.isMultiUse) {
      json.isMultiUse = msg.isMultiUse;
    }
    if (msg.attendees?.length) {
      json.attendees = msg.attendees;
    }
    if (msg.conferencing) {
      json.conferencing = msg.conferencing;
    }
    if (msg.timeIncrements?.length) {
      json.timeIncrements = msg.timeIncrements;
    }
    if (msg.recurrence) {
      json.recurrence = msg.recurrence;
    }
    if (msg.availabilityToUse) {
      json.availabilityToUse = msg.availabilityToUse;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.isActive = reader.readBool();
          break;
        }
        case 2: {
          msg.isMultiUse = reader.readBool();
          break;
        }
        case 3: {
          msg.attendees.push(reader.readString());
          break;
        }
        case 4: {
          msg.conferencing = reader.readString();
          break;
        }
        case 5: {
          msg.timeIncrements.push(reader.readString());
          break;
        }
        case 6: {
          msg.recurrence = reader.readString();
          break;
        }
        case 7: {
          msg.availabilityToUse = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const isActive = json.isActive ?? json.isActive;
    if (isActive) {
      msg.isActive = isActive;
    }
    const isMultiUse = json.isMultiUse ?? json.isMultiUse;
    if (isMultiUse) {
      msg.isMultiUse = isMultiUse;
    }
    const attendees = json.attendees ?? json.attendees;
    if (attendees) {
      msg.attendees = attendees;
    }
    const conferencing = json.conferencing ?? json.conferencing;
    if (conferencing) {
      msg.conferencing = conferencing;
    }
    const timeIncrements = json.timeIncrements ?? json.timeIncrements;
    if (timeIncrements) {
      msg.timeIncrements = timeIncrements;
    }
    const recurrence = json.recurrence ?? json.recurrence;
    if (recurrence) {
      msg.recurrence = recurrence;
    }
    const availabilityToUse = json.availabilityToUse ?? json.availabilityToUse;
    if (availabilityToUse) {
      msg.availabilityToUse = availabilityToUse;
    }
    return msg;
  },
};

export const SetUserProfileReq = {
  /**
   * Serializes a SetUserProfileReq to protobuf.
   */
  encode: function (setUserProfileReq) {
    return SetUserProfileReq._writeMessage(
      setUserProfileReq,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a SetUserProfileReq from protobuf.
   */
  decode: function (bytes) {
    return SetUserProfileReq._readMessage(
      SetUserProfileReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a SetUserProfileReq to JSON.
   */
  encodeJSON: function (setUserProfileReq) {
    return JSON.stringify(
      SetUserProfileReq._writeMessageJSON(setUserProfileReq)
    );
  },

  /**
   * Deserializes a SetUserProfileReq from JSON.
   */
  decodeJSON: function (json) {
    return SetUserProfileReq._readMessageJSON(
      SetUserProfileReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a SetUserProfileReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      userID: "",
      email: "",
      username: "",
      timeAvailability: [],
      bookingLinks: [],
      settings: Settings.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userID) {
      writer.writeString(1, msg.userID);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    if (msg.username) {
      writer.writeString(3, msg.username);
    }
    if (msg.timeAvailability?.length) {
      writer.writeRepeatedString(4, msg.timeAvailability);
    }
    if (msg.bookingLinks?.length) {
      writer.writeRepeatedString(5, msg.bookingLinks);
    }
    if (msg.settings) {
      writer.writeMessage(6, msg.settings, Settings._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.userID) {
      json.userID = msg.userID;
    }
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.timeAvailability?.length) {
      json.timeAvailability = msg.timeAvailability;
    }
    if (msg.bookingLinks?.length) {
      json.bookingLinks = msg.bookingLinks;
    }
    if (msg.settings) {
      const settings = Settings._writeMessageJSON(msg.settings);
      if (Object.keys(settings).length > 0) {
        json.settings = settings;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userID = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        case 3: {
          msg.username = reader.readString();
          break;
        }
        case 4: {
          msg.timeAvailability.push(reader.readString());
          break;
        }
        case 5: {
          msg.bookingLinks.push(reader.readString());
          break;
        }
        case 6: {
          reader.readMessage(msg.settings, Settings._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const userID = json.userID ?? json.userID;
    if (userID) {
      msg.userID = userID;
    }
    const email = json.email ?? json.email;
    if (email) {
      msg.email = email;
    }
    const username = json.username ?? json.username;
    if (username) {
      msg.username = username;
    }
    const timeAvailability = json.timeAvailability ?? json.timeAvailability;
    if (timeAvailability) {
      msg.timeAvailability = timeAvailability;
    }
    const bookingLinks = json.bookingLinks ?? json.bookingLinks;
    if (bookingLinks) {
      msg.bookingLinks = bookingLinks;
    }
    const settings = json.settings ?? json.settings;
    if (settings) {
      const m = Settings.initialize();
      Settings._readMessageJSON(m, settings);
      msg.settings = m;
    }
    return msg;
  },
};

export const SetUserProfileRes = {
  /**
   * Serializes a SetUserProfileRes to protobuf.
   */

  encode: function (_setUserProfileRes) {
    return new Uint8Array();
  },

  /**
   * Deserializes a SetUserProfileRes from protobuf.
   */

  decode: function (_bytes) {
    return {};
  },

  /**
   * Serializes a SetUserProfileRes to JSON.
   */

  encodeJSON: function (_setUserProfileRes) {
    return "{}";
  },

  /**
   * Deserializes a SetUserProfileRes from JSON.
   */

  decodeJSON: function (_json) {
    return {};
  },

  /**
   * Initializes a SetUserProfileRes with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },
};

export const SetAvailabilityReq = {
  /**
   * Serializes a SetAvailabilityReq to protobuf.
   */
  encode: function (setAvailabilityReq) {
    return SetAvailabilityReq._writeMessage(
      setAvailabilityReq,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a SetAvailabilityReq from protobuf.
   */
  decode: function (bytes) {
    return SetAvailabilityReq._readMessage(
      SetAvailabilityReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a SetAvailabilityReq to JSON.
   */
  encodeJSON: function (setAvailabilityReq) {
    return JSON.stringify(
      SetAvailabilityReq._writeMessageJSON(setAvailabilityReq)
    );
  },

  /**
   * Deserializes a SetAvailabilityReq from JSON.
   */
  decodeJSON: function (json) {
    return SetAvailabilityReq._readMessageJSON(
      SetAvailabilityReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a SetAvailabilityReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      userID: "",
      email: "",
      username: "",
      timeAvailability: [],
      bookingLinks: [],
      settings: Settings.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userID) {
      writer.writeString(1, msg.userID);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    if (msg.username) {
      writer.writeString(3, msg.username);
    }
    if (msg.timeAvailability?.length) {
      writer.writeRepeatedString(4, msg.timeAvailability);
    }
    if (msg.bookingLinks?.length) {
      writer.writeRepeatedString(5, msg.bookingLinks);
    }
    if (msg.settings) {
      writer.writeMessage(6, msg.settings, Settings._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.userID) {
      json.userID = msg.userID;
    }
    if (msg.email) {
      json.email = msg.email;
    }
    if (msg.username) {
      json.username = msg.username;
    }
    if (msg.timeAvailability?.length) {
      json.timeAvailability = msg.timeAvailability;
    }
    if (msg.bookingLinks?.length) {
      json.bookingLinks = msg.bookingLinks;
    }
    if (msg.settings) {
      const settings = Settings._writeMessageJSON(msg.settings);
      if (Object.keys(settings).length > 0) {
        json.settings = settings;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userID = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        case 3: {
          msg.username = reader.readString();
          break;
        }
        case 4: {
          msg.timeAvailability.push(reader.readString());
          break;
        }
        case 5: {
          msg.bookingLinks.push(reader.readString());
          break;
        }
        case 6: {
          reader.readMessage(msg.settings, Settings._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const userID = json.userID ?? json.userID;
    if (userID) {
      msg.userID = userID;
    }
    const email = json.email ?? json.email;
    if (email) {
      msg.email = email;
    }
    const username = json.username ?? json.username;
    if (username) {
      msg.username = username;
    }
    const timeAvailability = json.timeAvailability ?? json.timeAvailability;
    if (timeAvailability) {
      msg.timeAvailability = timeAvailability;
    }
    const bookingLinks = json.bookingLinks ?? json.bookingLinks;
    if (bookingLinks) {
      msg.bookingLinks = bookingLinks;
    }
    const settings = json.settings ?? json.settings;
    if (settings) {
      const m = Settings.initialize();
      Settings._readMessageJSON(m, settings);
      msg.settings = m;
    }
    return msg;
  },
};

export const SetAvailabilityRes = {
  /**
   * Serializes a SetAvailabilityRes to protobuf.
   */

  encode: function (_setAvailabilityRes) {
    return new Uint8Array();
  },

  /**
   * Deserializes a SetAvailabilityRes from protobuf.
   */

  decode: function (_bytes) {
    return {};
  },

  /**
   * Serializes a SetAvailabilityRes to JSON.
   */

  encodeJSON: function (_setAvailabilityRes) {
    return "{}";
  },

  /**
   * Deserializes a SetAvailabilityRes from JSON.
   */

  decodeJSON: function (_json) {
    return {};
  },

  /**
   * Initializes a SetAvailabilityRes with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },
};

export const SetBookingReq = {
  /**
   * Serializes a SetBookingReq to protobuf.
   */
  encode: function (setBookingReq) {
    return SetBookingReq._writeMessage(
      setBookingReq,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes a SetBookingReq from protobuf.
   */
  decode: function (bytes) {
    return SetBookingReq._readMessage(
      SetBookingReq.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Serializes a SetBookingReq to JSON.
   */
  encodeJSON: function (setBookingReq) {
    return JSON.stringify(SetBookingReq._writeMessageJSON(setBookingReq));
  },

  /**
   * Deserializes a SetBookingReq from JSON.
   */
  decodeJSON: function (json) {
    return SetBookingReq._readMessageJSON(
      SetBookingReq.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes a SetBookingReq with all fields set to their default value.
   */
  initialize: function () {
    return {
      userID: "",
      bookingLinkID: "",
      isActive: false,
      isMultiUse: false,
      attendees: [],
      conferencing: "",
      timeIncrements: [],
      recurrence: "",
      availabilityToUse: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userID) {
      writer.writeString(1, msg.userID);
    }
    if (msg.bookingLinkID) {
      writer.writeString(2, msg.bookingLinkID);
    }
    if (msg.isActive) {
      writer.writeBool(3, msg.isActive);
    }
    if (msg.isMultiUse) {
      writer.writeBool(4, msg.isMultiUse);
    }
    if (msg.attendees?.length) {
      writer.writeRepeatedString(5, msg.attendees);
    }
    if (msg.conferencing) {
      writer.writeString(6, msg.conferencing);
    }
    if (msg.timeIncrements?.length) {
      writer.writeRepeatedString(7, msg.timeIncrements);
    }
    if (msg.recurrence) {
      writer.writeString(8, msg.recurrence);
    }
    if (msg.availabilityToUse) {
      writer.writeString(9, msg.availabilityToUse);
    }
    return writer;
  },

  /**
   * @private
   */
  _writeMessageJSON: function (msg) {
    const json = {};
    if (msg.userID) {
      json.userID = msg.userID;
    }
    if (msg.bookingLinkID) {
      json.bookingLinkID = msg.bookingLinkID;
    }
    if (msg.isActive) {
      json.isActive = msg.isActive;
    }
    if (msg.isMultiUse) {
      json.isMultiUse = msg.isMultiUse;
    }
    if (msg.attendees?.length) {
      json.attendees = msg.attendees;
    }
    if (msg.conferencing) {
      json.conferencing = msg.conferencing;
    }
    if (msg.timeIncrements?.length) {
      json.timeIncrements = msg.timeIncrements;
    }
    if (msg.recurrence) {
      json.recurrence = msg.recurrence;
    }
    if (msg.availabilityToUse) {
      json.availabilityToUse = msg.availabilityToUse;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userID = reader.readString();
          break;
        }
        case 2: {
          msg.bookingLinkID = reader.readString();
          break;
        }
        case 3: {
          msg.isActive = reader.readBool();
          break;
        }
        case 4: {
          msg.isMultiUse = reader.readBool();
          break;
        }
        case 5: {
          msg.attendees.push(reader.readString());
          break;
        }
        case 6: {
          msg.conferencing = reader.readString();
          break;
        }
        case 7: {
          msg.timeIncrements.push(reader.readString());
          break;
        }
        case 8: {
          msg.recurrence = reader.readString();
          break;
        }
        case 9: {
          msg.availabilityToUse = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  /**
   * @private
   */
  _readMessageJSON: function (msg, json) {
    const userID = json.userID ?? json.userID;
    if (userID) {
      msg.userID = userID;
    }
    const bookingLinkID = json.bookingLinkID ?? json.bookingLinkID;
    if (bookingLinkID) {
      msg.bookingLinkID = bookingLinkID;
    }
    const isActive = json.isActive ?? json.isActive;
    if (isActive) {
      msg.isActive = isActive;
    }
    const isMultiUse = json.isMultiUse ?? json.isMultiUse;
    if (isMultiUse) {
      msg.isMultiUse = isMultiUse;
    }
    const attendees = json.attendees ?? json.attendees;
    if (attendees) {
      msg.attendees = attendees;
    }
    const conferencing = json.conferencing ?? json.conferencing;
    if (conferencing) {
      msg.conferencing = conferencing;
    }
    const timeIncrements = json.timeIncrements ?? json.timeIncrements;
    if (timeIncrements) {
      msg.timeIncrements = timeIncrements;
    }
    const recurrence = json.recurrence ?? json.recurrence;
    if (recurrence) {
      msg.recurrence = recurrence;
    }
    const availabilityToUse = json.availabilityToUse ?? json.availabilityToUse;
    if (availabilityToUse) {
      msg.availabilityToUse = availabilityToUse;
    }
    return msg;
  },
};

export const SetBookingRes = {
  /**
   * Serializes a SetBookingRes to protobuf.
   */

  encode: function (_setBookingRes) {
    return new Uint8Array();
  },

  /**
   * Deserializes a SetBookingRes from protobuf.
   */

  decode: function (_bytes) {
    return {};
  },

  /**
   * Serializes a SetBookingRes to JSON.
   */

  encodeJSON: function (_setBookingRes) {
    return "{}";
  },

  /**
   * Deserializes a SetBookingRes from JSON.
   */

  decodeJSON: function (_json) {
    return {};
  },

  /**
   * Initializes a SetBookingRes with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },
};
