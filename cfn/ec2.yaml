AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  #  KeyName:
  #    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  #    Type: AWS::EC2::KeyPair::KeyName
  #    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
                    t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
                    m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
                    m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
                    c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
                    g3.8xlarge,
                    r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
                    i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
                    d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  # dynamo params
  #  HashKeyElementName:
  #    Description: HashType PrimaryKey Name
  #    Type: String
  #    AllowedPattern: '[a-zA-Z0-9]*'
  #    MinLength: '1'
  #    MaxLength: '2048'
  #    ConstraintDescription: must contain only alphanumberic characters
  #  HashKeyElementType:
  #    Description: HashType PrimaryKey Type
  #    Type: String
  #    Default: S
  #    AllowedPattern: '[S|N]'
  #    MinLength: '1'
  #    MaxLength: '1'
  #    ConstraintDescription: must be either S or N
  ReadCapacityUnits:
    Description: Provisioned read throughput
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '10000'
    ConstraintDescription: must be between 1 and 10000
  WriteCapacityUnits:
    Description: Provisioned write throughput
    Type: Number
    Default: '1'
    MinValue: '1'
    MaxValue: '10000'
    ConstraintDescription: must be between 1 and 10000
  # IP configuration
  VPCCidrBlock:
    Description: 'CIDR IP for VPC'
    Type: String
    Default: 10.0.0.0/16

  PublicCidrBlock1:
    Description: 'CIDR IP for public subnet'
    Type: String
    Default: 10.0.1.0/24

  PublicSGSource:
    Description: The IP address range that can be used to access the web app
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # true/false resource switches
  PublicEnabledParam:
    Description: 'true if resources to connect VPC to internet should be deployed'
    Type: String
    AllowedValues:
      - true
      - false
    Default: true ##TODO switch
  EC2SecurityEnabledParam:
    Description: 'true if resources necessary for EC2 security should be deployed'
    Type: String
    AllowedValues:
      - true
      - false
    Default: true ##TODO switch
#####################################
Conditions:
  # Create resources to connect VPC to the internet
  PublicEnabled: !Equals [!Ref PublicEnabledParam, "true"]

  # Create security resources needed for an EC2 instances
  EC2SecurityEnabled: !Equals [!Ref EC2SecurityEnabledParam, "true"]
#####################################
Resources:
  ###########
  # VPC with Internet Gateway
  ###########

  #VPC
  SimpleVPC:
    Type: AWS::EC2::VPC
    Properties:
      #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
  #      Tags:
  #        - Key: Name
  #          Value: !Join
  #            - '-'
  #            - - !Ref NamingPrefix
  #              - VPC

  #Internet Gateway: Allows communication between instances in your VPC and the internet.
  IGW:
    Condition: PublicEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
    Type: AWS::EC2::InternetGateway
  #    Properties:
  #      Tags:
  #        - Key: Name
  #          Value: !Join
  #            - '-'
  #            - - !Ref NamingPrefix
  #              - IGW
  IGWAttach:
    Condition: PublicEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SimpleVPC
      InternetGatewayId: !Ref IGW
      #VpnGatewayId


  ###########
  # Route Table to Internet
  ###########

  # Route to/from Internet
  InternetRoute:
    Condition: PublicEnabled
    Type: AWS::EC2::Route
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref InternetRouteTable

  InternetRouteTable:
    Condition: PublicEnabled
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SimpleVPC
  #      Tags:
  #        - Key: Name
  #          Value: !Join
  #            - '-'
  #            - - !Ref NamingPrefix
  #              - Public
  #              - RTB

  ###########
  # Public Subnet
  ###########

  PublicSubnet1:
    Condition: PublicEnabled
    Type: AWS::EC2::Subnet
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
    Properties:
      VpcId: !Ref SimpleVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getavailabilityzones.html
          Ref: 'AWS::Region'
      CidrBlock: !Ref PublicCidrBlock1
      MapPublicIpOnLaunch: false
  #      Tags:
  #        - Key: Name
  #          Value: !Join
  #            - '-'
  #            - - !Ref NamingPrefix
  #              - Public
  #              - 1

  PublicSubnet1RouteToInternet:
    Condition: PublicEnabled
    Type: AWS::EC2::SubnetRouteTableAssociation
    #https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
    DependsOn:
      - PublicSubnet1
      - InternetRouteTable
    Properties:
      RouteTableId: !Ref InternetRouteTable
      SubnetId: !Ref PublicSubnet1

  ###########
  # App Security Group
  ###########

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: EC2SecurityEnabled
    Properties:
      VpcId: !Ref SimpleVPC
      #      GroupName: !Join
      #        - '-'
      #        - - !Ref NamingPrefix
      #          - SG
      GroupDescription: >-
        Enable HTTP access via port 80 and 443 to the allowed CIDR
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: !Ref PublicSGSource
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref PublicSGSource
  #      Tags:
  #        - Key: Name
  #          Value: !Join
  #            - '-'
  #            - - !Ref NamingPrefix
  #              - SG
  #ec2 instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 't2.nano'
      #      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      #      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'LatestAmiId'

      #      SubnetId: !Ref 'PublicSubnet1'
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: PublicSecurityGroup
          SubnetId:
            Ref: PublicSubnet1
      #          SecurityGroupIds:
      #            - !Ref 'PublicSecurityGroup'
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          sudo yum install tmux golang git -y
          tmux
          export GOPATH=$HOME/go
          git clone https://github.com/OpenCal-FYDP/PreferenceManagement.git
          cd ./PreferenceManagement
          go build
          ./PreferenceManagement

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
  # dynamoDB resources
  userPreferencesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "UserPreferences"
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref 'ReadCapacityUnits'
        WriteCapacityUnits: !Ref 'WriteCapacityUnits'
      GlobalSecondaryIndexes:
        - IndexName: "username-index"
          KeySchema:
            - AttributeName: "username"
              KeyType: "HASH" # Are these "RANGE" for "RangeKey"? I feel like they must be hash?
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: !Ref 'ReadCapacityUnits'
            WriteCapacityUnits: !Ref 'WriteCapacityUnits'
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
  TableName:
    Value: !Ref 'userPreferencesTable'
    Description: Table name of the newly created DynamoDB table